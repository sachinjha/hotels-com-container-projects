'use strict';

var _require = require('zipkin'),
    Annotation = _require.Annotation,
    Request = _require.Request;

function wrapFetch(fetch, _ref) {
  var tracer = _ref.tracer,
      _ref$serviceName = _ref.serviceName,
      serviceName = _ref$serviceName === undefined ? 'unknown' : _ref$serviceName,
      remoteServiceName = _ref.remoteServiceName;

  return function zipkinfetch(url) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new Promise(function (resolve, reject) {
      tracer.scoped(function () {
        tracer.setId(tracer.createChildId());
        var traceId = tracer.id;

        var method = opts.method || 'GET';
        tracer.recordServiceName(serviceName);
        tracer.recordRpc(method.toUpperCase());
        tracer.recordBinary('http.url', url);
        tracer.recordAnnotation(new Annotation.ClientSend());
        if (remoteServiceName) {
          // TODO: can we get the host and port of the http connection?
          tracer.recordAnnotation(new Annotation.ServerAddr({
            serviceName: remoteServiceName
          }));
        }

        var zipkinOpts = Request.addZipkinHeaders(opts, traceId);
        fetch(url, zipkinOpts).then(function (res) {
          tracer.scoped(function () {
            tracer.setId(traceId);
            tracer.recordBinary('http.status_code', res.status.toString());
            tracer.recordAnnotation(new Annotation.ClientRecv());
          });
          resolve(res);
        }).catch(function (err) {
          tracer.scoped(function () {
            tracer.setId(traceId);
            tracer.recordBinary('request.error', err.toString());
            tracer.recordAnnotation(new Annotation.ClientRecv());
          });
          reject(err);
        });
      });
    });
  };
}

module.exports = wrapFetch;