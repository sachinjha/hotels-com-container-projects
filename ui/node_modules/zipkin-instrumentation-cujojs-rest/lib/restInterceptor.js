'use strict';

/* eslint-disable no-param-reassign */
var interceptor = require('rest/interceptor');

var _require = require('zipkin'),
    Annotation = _require.Annotation,
    Request = _require.Request;

function getRequestMethod(req) {
  var method = 'get';
  if (req.entity) {
    method = 'post';
  }
  if (req.method) {
    method = req.method;
  }
  return method;
}

function request(req, _ref) {
  var _this = this;

  var tracer = _ref.tracer,
      _ref$serviceName = _ref.serviceName,
      serviceName = _ref$serviceName === undefined ? 'unknown' : _ref$serviceName,
      remoteServiceName = _ref.remoteServiceName;

  return tracer.scoped(function () {
    tracer.setId(tracer.createChildId());
    var traceId = tracer.id;
    _this.traceId = traceId;
    var reqWithHeaders = Request.addZipkinHeaders(req, traceId);

    var method = getRequestMethod(reqWithHeaders);
    tracer.recordServiceName(serviceName);
    tracer.recordRpc(method.toUpperCase());
    tracer.recordBinary('http.url', reqWithHeaders.path);
    tracer.recordAnnotation(new Annotation.ClientSend());
    if (remoteServiceName) {
      // TODO: can we get the host and port of the http connection?
      tracer.recordAnnotation(new Annotation.ServerAddr({
        serviceName: remoteServiceName
      }));
    }
    return reqWithHeaders;
  });
}

function response(res, _ref2) {
  var _this2 = this;

  var tracer = _ref2.tracer;

  tracer.scoped(function () {
    tracer.setId(_this2.traceId);
    tracer.recordBinary('http.status_code', res.status.code.toString());
    tracer.recordAnnotation(new Annotation.ClientRecv());
  });
  return res;
}

module.exports = interceptor({
  request: request,
  response: response
});